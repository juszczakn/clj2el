(defun clj2el-replace-map ()
  (beginning-of-buffer)
  (while (search-forward-regexp "\\bmap\\b" nil t)
    (replace-match "clj2el-map")))

(defun clj2el-replace-let ()
  (beginning-of-buffer)
  (while (search-forward-regexp "let[[:blank:]]*\\[" nil t)
    (replace-match "clj2el-let [")))

(defun clj2el-replace-lambdas ()
  (beginning-of-buffer)
  (while (search-forward "#(" nil t)
    (replace-match "(lambda (&optional % %2 %3 %4) (")
    (backward-char)
    (paredit-forward)
    (insert ")")))

(defun clj2el-replace-hash-maps ()
  (beginning-of-buffer)
  (while (search-forward "{" nil t)
    (replace-match "(clj2el-make-hash-table "))
  (beginning-of-buffer)
  (while (search-forward "}" nil t)
    (replace-match ")")))

(defun clj2el-compile-buffer ()
  (interactive)
  (let* ((cur-buf-substring (buffer-substring-no-properties 1 (point-max)))
         (cur-buf-name (buffer-file-name))
         (new-buf-name (concat cur-buf-name "j"))
         (new-buf (generate-new-buffer (generate-new-buffer-name "compilation-buffer"))))
    (set-buffer new-buf)
    (insert cur-buf-substring)
    (clj2el-replace-hash-maps)
    (clj2el-replace-lambdas)
    (clj2el-replace-let)
    (clj2el-replace-map)
    (write-file new-buf-name)
    (kill-buffer new-buf)))
